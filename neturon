import requests

# Dane uwierzytelniające do API OpenStack
auth = {
    'auth_url': 'http://<YOUR_OPENSTACK_AUTH_URL>/v3',
    'username': '<YOUR_USERNAME>',
    'password': '<YOUR_PASSWORD>',
    'project_name': '<YOUR_PROJECT_NAME>',
    'user_domain_id': 'default',
    'project_domain_id': 'default',
}

# Uzyskaj token uwierzytelniający
auth_data = {
    "auth": {
        "identity": {
            "methods": ["password"],
            "password": {
                "user": {
                    "name": auth['username'],
                    "domain": {"id": auth['user_domain_id']},
                    "password": auth['password']
                }
            }
        },
        "scope": {
            "project": {
                "name": auth['project_name'],
                "domain": {"id": auth['project_domain_id']}
            }
        }
    }
}

response = requests.post(f"{auth['auth_url']}/auth/tokens", json=auth_data)
response_data = response.json()

# Pobierz token z odpowiedzi
token = response.headers['X-Subject-Token']

# Zdefiniuj nagłówki żądania z uwzględnieniem tokena
headers = {
    'X-Auth-Token': token,
    'Content-Type': 'application/json'
}

# Zdefiniuj identyfikator instancji (device_id)
device_id = '5e3898d7-11be-483e-9732-b2f5eccd2b2e'

# Wykonaj zapytanie GET do API Neutron, aby znaleźć porty dla danej instancji
url = f"http://<YOUR_NEUTRON_API_URL>/v2.0/ports?device_id={device_id}"
response = requests.get(url, headers=headers)
response_data = response.json()

# Sprawdź, czy znaleziono porty dla podanej instancji
if 'ports' in response_data:
    ports = response_data['ports']
    if ports:
        for port in ports:
            # Pobierz listę przypisanych adresów IP
            fixed_ips = port.get('fixed_ips', [])
            for ip in fixed_ips:
                ip_address = ip['ip_address']
                subnet_id = ip['subnet_id']

                # Wykonaj zapytanie DELETE, aby usunąć adres IP z portu
                url = f"http://<YOUR_NEUTRON_API_URL>/v2.0/ports/{port['id']}"
                response = requests.delete(url, headers=headers)
                if response.status_code == 204:
                    print(f"Usunięto adres IP {ip_address} ze zbioru {subnet_id} na porcie {port['id']}")
                else:
                    print(f"Błąd podczas usuwania adresu IP {ip_address} na porcie {port['id']}. Kod odpowiedzi: {response.status_code}")
    else:
        print(f"Nie znaleziono portów dla device_id: {device_id}")
else:
    print("Błąd: Brak odpowiedzi 'ports' w wyniku zapytania.")

